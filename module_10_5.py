# Задача "Многопроцессное считывание":

# Скачать архив с файлами для считывания данных и распаковать его в проект для дальнейшего использования.
# Создать функцию read_info(name), где name - название файла.
# Функция должна:
# 1. Создавать локальный список all_data.
# 2. Открывать файл name для чтения.
# 3. Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
# 4. Во время считывания добавлять каждую строку в список all_data.
# Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
# 5. Создайте список названий файлов в соответствии с названиями файлов архива.
# 6. Вызовите функцию read_info для каждого файла по очереди (линейно),
# измерьте время выполнения и выведите его в консоль.
# 7. Вызовите функцию read_info для каждого файла, используя многопроцессный подход,
# контекстный менеджер with и объект Pool. Для вызова функции используйте метод map, передав в него
# функцию read_info и список названий файлов. Измерьте время выполнения и выведите его в консоль.

import multiprocessing
from time import time

def read_info(name):
    all_data = []
    with open(name) as file:
        for line in file:
            if line:
                line = file.readline()
                all_data.append(line)
            else:
                break

filenames = [f'./file {number}.txt' for number in range(1, 5)]

if __name__ == '__main__':
    # Линейный вызов.
    start_1 = time()

    for file in filenames:
        read_info(file)

    end_1 = time()
    print(f'Время линейного выполнения программы: {round(end_1 - start_1, 2)} секунд(ы).')

    # Многопроцессный вызов.
    start_2 = time()

    with multiprocessing.Pool(processes=len(filenames)) as pool:
        pool.map(read_info, filenames)

    end_2 = time()
    print(f'Время мультипроцессного выполнения программы: {round(end_2 - start_2, 2)} секунд(ы).')